#!pip install sqlalchemy
import os
import pandas as pd
import openpyxl
import glob

path = os.getcwd()
xlsx_files = glob.glob(os.path.join(path, "*.xlsx")) 
combined_df, combined_pmt = pd.DataFrame(), pd.DataFrame()
prg, status, pmt, iso, company = pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame()
header_name = 'Range of intercompany projects'
header_name1 = 'Project type'

def clear_table(df,first_col):
      df[first_col] = df[first_col].astype(str)
      df = df[df[first_col].notna()  & (df[first_col] != '') & (df[first_col] != '0') & (df[first_col] != 'nan')]
      return df


def check_sheet_exists(file_path, sheet_name):
    try:
        with pd.ExcelFile(file_path, engine='openpyxl') as xls:
            if sheet_name in xls.sheet_names:
                return True
            else:
                print(f"Лист '{sheet_name}' не найден в файле {file_path}")
                return False
    except Exception as e:
        print(f"Ошибка при обработке {file_path}: {e}")
        return False 
    
for file in xlsx_files: 
     try:
              if check_sheet_exists(file, 'Data_Input_Act'):
                  df = pd.read_excel(file, sheet_name = 'Data_Input_Act', header = 6, usecols = 'B:CM' , engine='openpyxl', skiprows = [7,8,9],  dtype={'Project-ID': str})
                 
                  search_res = df[df.iloc[:, 0] == header_name]
                  if not search_res.empty:
                        start_index = search_res.index[0]
                        df = df.drop(df.index[start_index:start_index+4])
                  else:
                         print(f"Table with header '{header_name}' isn't exist on sheet")
                  full_df = clear_table(df, 'P_CODE')
                  combined_df = pd.concat([combined_df, full_df], ignore_index=True) 
                  
              if check_sheet_exists(file, 'PMT'):
                  list_cols = ['Project type', 'Project Owner', 'Project-ID', 'Product group', 'Contract signing date', 'ISO county code', 'Closing date']
                  
                  pmt = pd.read_excel(file, sheet_name = 'PMT', header = 4, usecols = list_cols, engine='openpyxl',skiprows = [606],  dtype={'Project-ID': str}) 
                 
                  full_pmt = clear_table(pmt, 'Project-ID')
                 
                  combined_pmt = pd.concat([combined_pmt, full_pmt], ignore_index=True)
              
              if company.empty:
                  if check_sheet_exists(file, 'Company'):
                      company = pd.read_excel(file, sheet_name = 'Company', header = 4, usecols = 'B:C', names=["company_code", "company_id",], engine='openpyxl')
                      company['currency'] = pd.Series(dtype='str') #add  column CURRENCY in company
              #else:
              #    print("datefаrame Company was successfully created earlier")
                  
              if status.empty:
                  if check_sheet_exists(file, 'STA'):
                      status = pd.read_excel(file, sheet_name = 'STA', header = 4, usecols = 'B:C',names=["project_status_name", "status_id"], engine='openpyxl') 
              #else:
              #    print("datefаrame STA was successfully created earlier")
              
              if prg.empty:
                  if check_sheet_exists(file, 'PRG'):
                      prg = pd.read_excel(file, sheet_name = 'PRG', header = 4, usecols = 'B:C', names=["product_group_name", "product_group_id"], engine='openpyxl') 
              #else:
              #    print("datefаrame PRG was successfully created earlier")
              
              if iso.empty:
                  if check_sheet_exists(file, 'ISO'):
                      iso = pd.read_excel(file, sheet_name = 'ISO', header = 4, usecols = 'B:D', names=["iso_code", "country_name", "iso_id"], engine='openpyxl') 
              #else:
              #    print("datefаrame ISO was successfully created earlier")  
              print(f"Успешно прочитано: {file}")    
     except Exception as e:
              print(f"Ошибка при чтении {file}: {e}")




